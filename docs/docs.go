// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/health": {
            "get": {
                "description": "Check if the application is running",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Health Check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/health.HealthCheckResponse"
                        }
                    }
                }
            }
        },
        "/search/bfs": {
            "get": {
                "description": "Search the recipe of elements using BFS",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "BFS search handler",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Query parameter",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "1",
                        "description": "Number of recipes to return",
                        "name": "num",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/search.SearchResponse"
                        }
                    }
                }
            }
        },
        "/search/bidirectional": {
            "get": {
                "description": "Search the recipe of elements using Bidirectional Search. Returns two trees representing the search paths from base elements and from the target element, meeting at a common node.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "Bidirectional search handler",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Target element to search for",
                        "name": "q",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful search operation",
                        "schema": {
                            "$ref": "#/definitions/search.BidirectionalSearchResponse"
                        }
                    }
                }
            }
        },
        "/search/dfs": {
            "get": {
                "description": "Search the recipe of elements using DFS",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "DFS search handler",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Query parameter",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "1",
                        "description": "Number of recipes to return",
                        "name": "num",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/search.SearchResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "health.HealthCheckResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "scraper.BidirectionalResult": {
            "type": "object",
            "properties": {
                "backward_tree": {
                    "$ref": "#/definitions/scraper.TreeNode"
                },
                "forward_tree": {
                    "$ref": "#/definitions/scraper.TreeNode"
                },
                "meeting_node_name": {
                    "type": "string"
                },
                "path_found": {
                    "type": "boolean"
                }
            }
        },
        "scraper.TreeNode": {
            "type": "object",
            "properties": {
                "children": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/scraper.TreeNode"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "search.BidirectionalSearchResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "result": {
                    "$ref": "#/definitions/scraper.BidirectionalResult"
                }
            }
        },
        "search.SearchResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "result": {
                    "$ref": "#/definitions/scraper.TreeNode"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
